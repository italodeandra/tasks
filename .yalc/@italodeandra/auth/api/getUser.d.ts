import { QueryClient, UseQueryOptions } from "@tanstack/react-query";
import { InferApiResponse } from "@italodeandra/next/api/apiHandlerWrapper";
import { AuthConfig } from ".";
import { IUser } from "../collections/user/User";
import { NextApiRequest, NextApiResponse } from "next";
export interface AuthUserGetApiError {
    code: 401;
}
export default function getUserHandler(_args: void, req: NextApiRequest, res: NextApiResponse, { connectDb, multitenantMode }: AuthConfig): Promise<import("mongodb").WithId<Pick<{
    _id: import("bson").ObjectId;
    email: string;
    type: string;
    password: string;
    passwordSalt: string;
    createdAt: Date;
    updatedAt: Date;
    emailVerified?: Date | undefined;
    name?: string | undefined;
    phoneNumber?: string | undefined;
    profilePicture?: string | undefined;
    tenantId?: import("bson").ObjectId | undefined;
    disabled?: boolean | undefined;
    customData?: Pick<{}, never> | undefined;
}, "_id" | "email" | "type" | "name" | "profilePicture">>>;
export type AuthUserGetApiResponse = InferApiResponse<typeof getUserHandler>;
export declare const useAuthGetUser: (required?: boolean, options?: Omit<UseQueryOptions<AuthUserGetApiResponse | null, AuthUserGetApiError>, "queryKey">) => {
    isLoading: boolean;
    data: {
        email: string;
        type: string;
        name?: string | undefined;
        profilePicture?: string | undefined;
        _id: string;
    } | null;
    error: AuthUserGetApiError;
    isError: true;
    isPending: false;
    isLoadingError: false;
    isRefetchError: true;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: AuthUserGetApiError | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions) => Promise<import("@tanstack/react-query").QueryObserverResult<{
        email: string;
        type: string;
        name?: string | undefined;
        profilePicture?: string | undefined;
        _id: string;
    } | null, AuthUserGetApiError>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
} | {
    isLoading: boolean;
    data: {
        email: string;
        type: string;
        name?: string | undefined;
        profilePicture?: string | undefined;
        _id: string;
    } | null;
    error: null;
    isError: false;
    isPending: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: true;
    status: "success";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: AuthUserGetApiError | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions) => Promise<import("@tanstack/react-query").QueryObserverResult<{
        email: string;
        type: string;
        name?: string | undefined;
        profilePicture?: string | undefined;
        _id: string;
    } | null, AuthUserGetApiError>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
} | {
    isLoading: boolean;
    data: undefined;
    error: AuthUserGetApiError;
    isError: true;
    isPending: false;
    isLoadingError: true;
    isRefetchError: false;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: AuthUserGetApiError | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions) => Promise<import("@tanstack/react-query").QueryObserverResult<{
        email: string;
        type: string;
        name?: string | undefined;
        profilePicture?: string | undefined;
        _id: string;
    } | null, AuthUserGetApiError>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
} | {
    isLoading: boolean;
    data: undefined;
    error: null;
    isError: false;
    isPending: true;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: false;
    status: "pending";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: AuthUserGetApiError | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions) => Promise<import("@tanstack/react-query").QueryObserverResult<{
        email: string;
        type: string;
        name?: string | undefined;
        profilePicture?: string | undefined;
        _id: string;
    } | null, AuthUserGetApiError>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
} | {
    isLoading: boolean;
    data: undefined;
    error: null;
    isError: false;
    isPending: true;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: false;
    status: "pending";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: AuthUserGetApiError | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions) => Promise<import("@tanstack/react-query").QueryObserverResult<{
        email: string;
        type: string;
        name?: string | undefined;
        profilePicture?: string | undefined;
        _id: string;
    } | null, AuthUserGetApiError>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
};
export declare const useAuthRequiredUserType: (typesToCheck: IUser["type"][], redirectTo?: string) => boolean;
export declare const useAuthRequiredUser: (redirectTo?: string) => boolean;
export declare const useAuthUser: () => boolean;
export declare const prefetch_authGetUser: (queryClient: QueryClient, _args: void, req: NextApiRequest, res: NextApiResponse, args_3: AuthConfig) => Promise<void>;
export declare const setData_authGetUser: (queryClient: QueryClient, data: AuthUserGetApiResponse | null) => unknown;
export declare const invalidate_authGetUser: (queryClient: QueryClient) => Promise<void>;
